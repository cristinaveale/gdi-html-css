/* Standard practice is to start with the main HTML elements (and their classes) and then move to other classes and ids */


/* Universal Styling */

html, body {
	padding: 0;
  margin: 0; /* Set margin and padding to 0 to take away default margins and padding that the browser adds. This makes the design look closer to the same cross browser. Look at the Box Model slide for more info. */
  font-family: 'Montserrat', Arial, Helvetica, sans-serif; /* Show how to import fonts from https://fonts.google.com/ */
  /* Default fonts, this is a web safe font stack. Font stacks typically contain 3-4 fonts*/ /* On the note of the sans-serif... Pairing serifs with sans-serifs are basic guidelines for design.*/
  font-size: 62.5%; /* Best practice for accessibility. More info on this can be found in Resources slide. 62.5% of 16px (typical default browser font-size) is 10px. So if we wanted to set our font size to 2rem that now equals 20 pixels */
  color: #202020; /* Hex colors that have two alternating values are always gray! The higher the numbers get, the lighter the color. Try to use an online contrast checker to make sure the colors you choose pass contrast guidelines for easy reading and universal usability.*/
}

/* Flexbox is a new layout mode in CSS3. Let's take an in-depth look with our slides */
.flex-grid { /* This is our "flexbox container" */
  display: flex; /* tells our browsers we are using flexbox and to display our items horizontally in columns */
  justify-content: center; /*This defines the alignment along the main axis. It helps distribute extra free space left over when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size.*/
  align-items: center; /* This defines the default behaviour for how flex items are laid out along the cross axis on the current line */
  flex-wrap: nowrap;
}

.col { /* These are our flexbox items. This is because they are direct descendants of our flexbox container (.flex-grid) */
  padding: 5em 2em 5em 2em; /* padding has four properties, top right, bottom, left, in that order. Just think of this as setting your padding going clockwise. Here we're saying the top and bottom have a padding of 5em, and left/right have 2ems; */
  font-size: 1.4rem; /* rem stands for 'root em'. */
  
}


.intro,
.call-to-action { /*DRY coding means, Don't Repeat Yourself. Here we're using the same styles to apply to our intro and call-to-action class. You can target multiple selectors by separating them with a comma. */
  align-items: center;
  display: flex;
  flex-direction: column; /* Flex direction by default is a row so here we're setting it as a column */
  justify-content: center;
  padding: 5em 2em; /* A quicker way to target padding top and bottom is by grouping them. This is giving the exact padding as .col above. */
}


/* Intro Section */
.intro > h1 { /* The greater than sign is a type of selector which says that ONLY the H1 that is directly a child of the intro class will receive this styling. Other H1's would not be affected. */
  font-size: 2rem; 
}

.intro > h2 {
  font-size: 2.5rem; 
  line-height: 0;
}


/* Purpose Section */
.purpose {
  background-color: #BA9AFB; /* Here we're setting the background color of our section */
}

.monitor-icon {
  padding-left: 4em;
}

.smartphone-icon {
  position: relative; 
  right: 4rem;
  top: 4rem;
  /* in CSS we work with boundary blocks called the "normal flow". With positioning, we are able to build and alter these blocks.  Relative positioning doesn't change the "look" at all, but it does allow us to alter it using offset properties like: top, right, bottom, and left. In this example, we want to bring our phone closer to the monitor, so we would move it to the right by 2rems. I like to imagine my finger pushing the block over in the direction I want it to go. */
}


/* About Me Section */
.cardinal-logo, .gdi-logo {
  height: 13rem; /* with our images, we are able to alter the size of them using height */
  position: relative; /* we ar going to want to move these 'blocks' around as well, so we will go ahead and give them a relative position. */
}

/* So our logos are inline with each other but we want them to move. From which direction would we 'push' our Cardinal logo if we wanted it to move up? How about our GDI logo? */
.cardinal-logo {
  bottom: 1.5rem; 
}

.gdi-logo {
  top: 3.5rem;
}

.cs-link {
  color: #2984D0; 
  text-decoration: none; /* this strips out the styling of our links by removing the underline to give it a cleaner appearance */
}

.gdi-link {
 color: #F05C61;
 text-decoration: none; 
}


/* Call to Action Section */
.call-to-action {
  background-color: #BA9AFB;
  font-size: 1.4rem;
}

button {
  border-style: none; /* This gets rid of the ancient looking border bevel to create a flat, clean look */
  cursor: pointer; /* When users hover over our button, we will change the arrow to a finger pointer. This helps for accessibility */
  padding: 1em;
  text-transform: uppercase; /* Text transform controls the capitalization of text. Uppercase, lowercase and capitalize */
  border-radius: 2px; /* we're softening the border of our button by giving it a 2px radius */
  background-color: white;
  font-weight: 500; /* sets how thick or thin characters in text should be displayed */
}

.action-texts {
  text-align: center;
}

/* Social Media Section */ 
.social-media {
  font-weight: 600;
}

.social-media-list {
  display: flex;
  list-style-type: none; /* To get rid of the list style, whether that be bullets or numbers, we give it a style type of 'none' */
  justify-content: center;
  text-transform: uppercase;
  font-size: 1.4rem;
  padding: 0;
}

.social-media-list>li {
  font-size: 1.1rem;
  margin: .5rem;
}

.social-media-list>li>a {
  text-decoration: none;
  color: #AA7FFE;
}



/* Now we can make our site responsive using media queries! More info on slide. */

/* Breakpoints */
@media (max-width: 980px) {
  .flex-grid {
    display: block; /* For anything less than 980px, we are changing our display from flexbox, to block. This makes it a block element. Block elements always start on a new line and takes up the full width available. */
  }
  .col {
    margin: auto;
    text-align: center;
    padding: 2em;
  }
  .col-wrap {
    display: flex;
    justify-content: center;
    flex-wrap: nowrap; /* Here we're specifying to keep our images on a single-line, rather than overflowing */
    padding-bottom: 3em;
  }
}